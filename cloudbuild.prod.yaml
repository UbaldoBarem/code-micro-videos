steps:
  - id: "Run docker-compose"
    name: 'gcr.io/$PROJECT_ID/docker-compose:1.24.0'
    args: ['-f','docker-compose.prod.yaml','up','-d']

  - id: "Run composer"
    name: 'gcr.io/cloud-builders/docker'
    args: ['exec','-t','app','composer','install']

  - id: "Copy .env"
    name: 'gcr.io/cloud-builders/docker'
    args: ['exec','-t','app','cp','.env.example','.env']

  - id: "Copy .env.testing"
    name: 'gcr.io/cloud-builders/docker'
    args: ['exec','-t','app','cp','.env.testing.example','.env.testing']

  - id: "Run key:generate"
    name: 'gcr.io/cloud-builders/docker'
    args: ['exec','-t','app','php','/var/www/artisan','key:generate']

  - id: "Run migrations"
    name: 'gcr.io/cloud-builders/docker'
    args: ['exec','-t','app','php','/var/www/artisan','migrate']

  - id: "Building image from Dockerfile.prod"
    name: 'gcr.io/cloud-builders/docker'
    args: ['build','-t','gcr.io/$PROJECT_ID/app-microflix:$SHORT_SHA','-f','Dockerfile.prod','.']

  - id: "Pushing Image"
    name: 'gcr.io/cloud-builders/docker'
    args: ['push','gcr.io/$PROJECT_ID/app-microflix:$SHORT_SHA']

  - id: "Adjusting deployment file - k8s"
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: '/bin/sh'
    args:
      - '-c'
      - |
        sed 's#img-app-deployment#gcr.io/$PROJECT_ID/app-microflix:$SHORT_SHA#g' k8s/app/deployment.yaml > k8s/app/deployment-new.yaml;
        cat k8s/app/deployment-new.yaml;

  - id: "Deploying k8s"
    name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'apply'
      - '-f'
      - 'k8s/app/deployment-new.yaml'
    env:
      -'CLOUDSDK_COMPUTE_ZONE=us-southamerica-east1-b'
      -'CLOUDSDK_CONTAINER_CLUSTER=cluster-docker-microflix'



